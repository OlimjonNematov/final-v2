#include <fcntl.h>
#include <unistd.h>
#include <stdint.h>
#include <stdio.h>
#include <stdlib.h>
#include "functions.h"

int read_data_blocks(const char *device, const ext3_inode *inode, data_blocks *file_data, const ext3_superblock *sb)
{

    int block_size = 4096 << sb->s_log_block_size;
    int required_blocks = (inode->i_size + block_size - 1) / block_size;
    printf("Single indirect block number: %u\n", inode->i_block[12]);
    printf("Required blocks: %d\n", required_blocks);

    // Print the inode size and block numbers
    printf("Inode size: %u\n", inode->i_size);
    for (int i = 0; i < 15; i++)
    {
        printf("Block %d: %u\n", i, inode->i_block[i]);
    }

    // Print the superblock information
    printf("Superblock:\n");
    printf("s_log_block_size: %u\n", sb->s_log_block_size);
    printf("s_first_data_block: %u\n", sb->s_first_data_block);

    // Allocate memory for the file data
    file_data->size = inode->i_size;
    file_data->data = malloc(file_data->size);
    if (file_data->data == NULL)
    {
        perror("Error allocating memory for file data");
        return -1;
    }

    // Read the file data blocks
    int fd = open(device, O_RDONLY);
    if (fd == -1)
    {
        perror("Error opening device");
        free(file_data->data);
        return -1;
    }

    // Read direct blocks
    for (int i = 0; i < 12 && inode->i_block[i] != 0; i++)
    {
        off_t block_offset = (off_t)inode->i_block[i] * block_size;
        printf("Reading direct block %d: block number: %u, block_offset: %lld\n", i, inode->i_block[i], (long long)block_offset); // Added print statement

        if (lseek(fd, block_offset, SEEK_SET) == -1)
        {
            fprintf(stderr, "Error seeking to data block: block number: %u, block_offset: %lld\n", inode->i_block[i], (long long)block_offset);

            close(fd);
            free(file_data->data);
            return -1;
        }

        ssize_t bytes_read = read(fd, file_data->data + i * block_size, block_size);
        if (bytes_read != block_size)
        {
            perror("Error reading data block");
            close(fd);
            free(file_data->data);
            return -1;
        }
        printf("Successfully read direct block %d: bytes_read: %zd\n", i, bytes_read); // Added print statement
    }

    // Read single indirect block (if needed)
    if (required_blocks > 12)
    {
        uint32_t *indirect_block = malloc(block_size);
        if (indirect_block == NULL)
        {
            perror("Error allocating memory for indirect block");
            close(fd);
            free(file_data->data);
            return -1;
        }

        off_t block_offset = (off_t)inode->i_block[12] * block_size;
        if (lseek(fd, block_offset, SEEK_SET) == -1)
        {
            fprintf(stderr, "Error seeking to data block: block number: %u, block_offset: %lld\n", inode->i_block[12], (long long)block_offset);

            close(fd);
            free(file_data->data);
            free(indirect_block);
            return -1;
        }

        ssize_t bytes_read = read(fd, indirect_block, block_size);
        if (bytes_read != block_size)
        {
            perror("Error reading single indirect block");
            close(fd);
            free(file_data->data);
            free(indirect_block);
            return -1;
        }
        // Read and print the first block
        off_t first_block_offset = (off_t)indirect_block[0] * block_size;
        if (lseek(fd, first_block_offset, SEEK_SET) == -1)
        {
            perror("Error seeking to first data block");
            close(fd);
            free(file_data->data);
            free(indirect_block);
            return -1;
        }

        char *first_block_data = malloc(block_size);
        if (first_block_data == NULL)
        {
            perror("Error allocating memory for first block data");
            close(fd);
            free(file_data->data);
            free(indirect_block);
            return -1;
        }

        ssize_t first_block_bytes_read = read(fd, first_block_data, block_size);
        if (first_block_bytes_read != block_size)
        {
            perror("Error reading first data block");
            close(fd);
            free(file_data->data);
            free(indirect_block);
            free(first_block_data);
            return -1;
        }

        printf("Contents of the first block:\n");
        for (int i = 0; i < block_size; i++)
        {
            printf("%02x ", (unsigned char)first_block_data[i]);
            if ((i + 1) % 16 == 0)
                printf("\n");
        }
        printf("\n");

        free(first_block_data);

        for (int i = 0; i < block_size / sizeof(uint32_t) && indirect_block[i] != 0; i++)
        {
            off_t data_block_offset = (off_t)indirect_block[i] * block_size;
            if (lseek(fd, data_block_offset, SEEK_SET) == -1)
            {
                perror("Error seeking to data block");
                close(fd);
                free(file_data->data);
                free(indirect_block);
                return -1;
            }

            ssize_t data_bytes_read = read(fd, file_data->data + (12 + i) * block_size, block_size);
            if (data_bytes_read != block_size)
            {
                perror("Error reading data block");
                close(fd);
                free(file_data->data);
                free(indirect_block);
                return -1;
            }
        }
        free(indirect_block);
    }
    // Read double indirect block (if needed)
    if (required_blocks > 12 + block_size / sizeof(uint32_t))
    {
        uint32_t *double_indirect_block = malloc(block_size);
        off_t block_offset = (off_t)inode->i_block[13] * block_size;

        if (double_indirect_block == NULL)
        {
            perror("Error allocating memory for double indirect block");
            close(fd);
            free(file_data->data);
            return -1;
        }

        off_t double_indirect_block_offset = (off_t)inode->i_block[13] * block_size;
        if (lseek(fd, double_indirect_block_offset, SEEK_SET) == -1)
        {
            fprintf(stderr, "Error seeking to data block: block number: %u, block_offset: %lld\n", inode->i_block[12], (long long)block_offset);

            close(fd);
            free(file_data->data);
            free(double_indirect_block);
            return -1;
        }

        ssize_t double_indirect_bytes_read = read(fd, double_indirect_block, block_size);
        if (double_indirect_bytes_read != block_size)
        {
            perror("Error reading double indirect block");
            close(fd);
            free(file_data->data);
            free(double_indirect_block);
            return -1;
        }

        for (int i = 0; i < block_size / sizeof(uint32_t) && double_indirect_block[i] != 0; i++)
        {
            uint32_t *indirect_block = malloc(block_size);
            if (indirect_block == NULL)
            {
                perror("Error allocating memory for indirect block");
                close(fd);
                free(file_data->data);
                free(double_indirect_block);
                return -1;
            }

            off_t indirect_block_offset = (off_t)double_indirect_block[i] * block_size;
            if (lseek(fd, indirect_block_offset, SEEK_SET) == -1)
            {
                fprintf(stderr, "Error seeking to data block: block number: %u, block_offset: %lld\n", inode->i_block[i], (long long)block_offset);

                close(fd);
                free(file_data->data);
                free(indirect_block);
                free(double_indirect_block);
                return -1;
            }

            ssize_t indirect_bytes_read = read(fd, indirect_block, block_size);
            if (indirect_bytes_read != block_size)
            {
                perror("Error reading indirect block");
                close(fd);
                free(file_data->data);
                free(indirect_block);
                free(double_indirect_block);
                return -1;
            }

            for (int j = 0; j < block_size / sizeof(uint32_t) && indirect_block[j] != 0; j++)
            {
                off_t data_block_offset = (off_t)indirect_block[j] * block_size;
                if (lseek(fd, data_block_offset, SEEK_SET) == -1)
                {
                    fprintf(stderr, "Error seeking to data block: block number: %u, block_offset: %lld\n", inode->i_block[i], (long long)block_offset);
                    close(fd);
                    free(file_data->data);
                    free(indirect_block);
                    free(double_indirect_block);
                    return -1;
                }

                ssize_t data_bytes_read = read(fd, file_data->data + (12 + i * (block_size / sizeof(uint32_t)) + j) * block_size, block_size);
                if (data_bytes_read != block_size)
                {
                    perror("Error reading data block");
                    close(fd);
                    free(file_data->data);
                    free(indirect_block);
                    free(double_indirect_block);
                    return -1;
                }
            }

            free(indirect_block);
        }

        free(double_indirect_block);
    }

    // Read triple indirect block (if needed)
    if (required_blocks > 12 + block_size / sizeof(uint32_t) + (block_size / sizeof(uint32_t)) * (block_size / sizeof(uint32_t)))
    {
        uint32_t *triple_indirect_block = malloc(block_size);
        if (triple_indirect_block == NULL)
        {
            perror("Error allocating memory for triple indirect block");
            close(fd);
            free(file_data->data);
            return -1;
        }

        off_t triple_indirect_block_offset = (off_t)inode->i_block[14] * block_size;
        off_t block_offset = (off_t)inode->i_block[14] * block_size;

        if (lseek(fd, triple_indirect_block_offset, SEEK_SET) == -1)
        {
            fprintf(stderr, "Error seeking to data block: block number: %u, block_offset: %lld\n", inode->i_block[14], (long long)block_offset);

            close(fd);
            free(file_data->data);
            free(triple_indirect_block);
            return -1;
        }

        ssize_t triple_indirect_bytes_read = read(fd, triple_indirect_block, block_size);
        if (triple_indirect_bytes_read != block_size)
        {
            perror("Error reading triple indirect block");
            close(fd);
            free(file_data->data);
            free(triple_indirect_block);
            return -1;
        }

        for (int i = 0; i < block_size / sizeof(uint32_t) && triple_indirect_block[i] != 0; i++)
        {
            uint32_t *double_indirect_block = malloc(block_size);
            if (double_indirect_block == NULL)
            {
                perror("Error allocating memory for double indirect block");
                close(fd);
                free(file_data->data);
                free(triple_indirect_block);
                return -1;
            }

            off_t double_indirect_block_offset = (off_t)triple_indirect_block[i] * block_size;
            if (lseek(fd, double_indirect_block_offset, SEEK_SET) == -1)
            {
                fprintf(stderr, "Error seeking to data block: block number: %u, block_offset: %lld\n", inode->i_block[i], (long long)block_offset);

                close(fd);
                free(file_data->data);
                free(double_indirect_block);
                free(triple_indirect_block);
                return -1;
            }

            ssize_t double_indirect_bytes_read = read(fd, double_indirect_block, block_size);
            if (double_indirect_bytes_read != block_size)
            {
                perror("Error reading double indirect block");
                close(fd);
                free(file_data->data);
                free(double_indirect_block);
                free(triple_indirect_block);
                return -1;
            }

            for (int j = 0; j < block_size / sizeof(uint32_t) && double_indirect_block[j] != 0; j++)
            {
                uint32_t *indirect_block = malloc(block_size);
                if (indirect_block == NULL)
                {
                    perror("Error allocating memory for indirect block");
                    close(fd);
                    free(file_data->data);
                    free(double_indirect_block);
                    free(triple_indirect_block);
                    return -1;
                }

                off_t indirect_block_offset = (off_t)double_indirect_block[j] * block_size;
                if (lseek(fd, indirect_block_offset, SEEK_SET) == -1)
                {
                    fprintf(stderr, "Error seeking to data block: block number: %u, block_offset: %lld\n", inode->i_block[i], (long long)block_offset);

                    close(fd);
                    free(file_data->data);
                    free(indirect_block);
                    free(double_indirect_block);
                    free(triple_indirect_block);
                    return -1;
                }

                ssize_t indirect_bytes_read = read(fd, indirect_block, block_size);
                if (indirect_bytes_read != block_size)
                {
                    perror("Error reading indirect block");
                    close(fd);
                    free(file_data->data);
                    free(indirect_block);
                    free(double_indirect_block);
                    free(triple_indirect_block);
                    return -1;
                }

                for (int k = 0; k < block_size / sizeof(uint32_t) && indirect_block[k] != 0; k++)
                {
                    off_t data_block_offset = (off_t)indirect_block[k] * block_size;
                    if (lseek(fd, data_block_offset, SEEK_SET) == -1)
                    {
                        fprintf(stderr, "Error seeking to data block: block number: %u, block_offset: %lld\n", inode->i_block[i], (long long)block_offset);

                        close(fd);
                        free(file_data->data);
                        free(indirect_block);
                        free(double_indirect_block);
                        free(triple_indirect_block);
                        return -1;
                    }

                    ssize_t data_bytes_read = read(fd, file_data->data + (12 + i * (block_size / sizeof(uint32_t)) * (block_size / sizeof(uint32_t)) + j * (block_size / sizeof(uint32_t)) + k) * block_size, block_size);
                    if (data_bytes_read != block_size)
                    {
                        perror("Error reading data block");
                        close(fd);
                        free(file_data->data);
                        free(indirect_block);
                        free(double_indirect_block);
                        free(triple_indirect_block);
                        return -1;
                    }
                }

                free(indirect_block);
            }

            free(double_indirect_block);
        }

        free(triple_indirect_block);
    }

    close(fd);
    return 0;
}
